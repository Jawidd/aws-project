#!/home/jawid/workspace/aws/aws-project/backend-flask/venv/bin/python

import os
from dotenv import load_dotenv
from pathlib import Path
import boto3
import sys
from botocore.exceptions import ClientError

# Load .env file from parent directory
env_path = Path(__file__).resolve().parent.parent / ".env"
load_dotenv(dotenv_path=env_path)

# get attribute from env
attrs = {
    'endpoint_url': os.getenv("DYNAMODB_LOCAL_URL")  # Can be None for prod
}
table_name = os.getenv("DYNAMODB_TABLE_NAME", "cruddur-messages")



# Create DynamoDB client
ddb = boto3.client('dynamodb', **attrs)



try:
    response = ddb.create_table(
        TableName=table_name,
        AttributeDefinitions=[
            {'AttributeName': 'pk', 'AttributeType': 'S'},
            {'AttributeName': 'sk', 'AttributeType': 'S'},
        ],
        KeySchema=[
            {'AttributeName': 'pk', 'KeyType': 'HASH'},
            {'AttributeName': 'sk', 'KeyType': 'RANGE'},
        ],
        BillingMode='PROVISIONED',  # Change to 'PAY_PER_REQUEST' if you want on-demand
        ProvisionedThroughput={
            'ReadCapacityUnits': 5,
            'WriteCapacityUnits': 5
        },
        # GlobalSecondaryIndexes=[]  # Add indexes here if needed
    )
    print(f"Table '{table_name}' created successfully.")
    print(response)

except ClientError as e:
    if e.response['Error']['Code'] == 'ResourceInUseException':
        print(f"Table '{table_name}' already exists.")
    else:
        print("Unexpected error:", e)
        raise
