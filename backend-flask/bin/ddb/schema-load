#!/home/jawid/workspace/aws/aws-project/backend-flask/venv/bin/python

import os
from dotenv import load_dotenv
from pathlib import Path
import boto3
from botocore.exceptions import ClientError

# Load environment variables
env_path = Path(__file__).resolve().parent.parent / ".env"
load_dotenv(dotenv_path=env_path)

# Check environment and set endpoint
env_type = os.getenv("ENV_TYPE", "dev")
if env_type == "prod":
    endpoint_url = None  # Use AWS DynamoDB
    print("\033[1;35m == Creating DynamoDB tables in AWS ==\033[0m")
else:
    endpoint_url = os.getenv("DYNAMODB_LOCAL_URL")
    print("\033[1;36m == Creating DynamoDB tables locally ==\033[0m")

ddb = boto3.client('dynamodb', endpoint_url=endpoint_url)

# Table names
messages_table_name = os.getenv("DYNAMODB_MESSAGES_TABLE", "messages")
conversations_table_name = os.getenv("DYNAMODB_CONVERSATIONS_TABLE", "conversations")

# --- Create Messages Table ---
try:
    ddb.create_table(
        TableName=messages_table_name,
        AttributeDefinitions=[
            {'AttributeName': 'pk', 'AttributeType': 'S'},
            {'AttributeName': 'sk', 'AttributeType': 'S'},
        ],
        KeySchema=[
            {'AttributeName': 'pk', 'KeyType': 'HASH'},
            {'AttributeName': 'sk', 'KeyType': 'RANGE'},
        ],
        BillingMode='PROVISIONED',  # free-tier friendly
        ProvisionedThroughput={
            'ReadCapacityUnits': 25,
            'WriteCapacityUnits': 25
        },
    )
    print(f"Table '{messages_table_name}' created successfully.")
except ClientError as e:
    if e.response['Error']['Code'] == 'ResourceInUseException':
        print(f"Table '{messages_table_name}' already exists.")
    else:
        raise

# --- Create Conversations Table ---
try:
    ddb.create_table(
        TableName=conversations_table_name,
        AttributeDefinitions=[
            {'AttributeName': 'pk', 'AttributeType': 'S'},
            {'AttributeName': 'sk', 'AttributeType': 'S'},
            {'AttributeName': 'last_message_timestamp', 'AttributeType': 'S'},  # optional GSI
        ],
        KeySchema=[
            {'AttributeName': 'pk', 'KeyType': 'HASH'},
            {'AttributeName': 'sk', 'KeyType': 'RANGE'},
        ],
        BillingMode='PROVISIONED',  # free-tier friendly
        ProvisionedThroughput={
            'ReadCapacityUnits': 25,
            'WriteCapacityUnits': 25
        },
        GlobalSecondaryIndexes=[
            {
                'IndexName': 'LastMessageIndex',
                'KeySchema': [
                    {'AttributeName': 'pk', 'KeyType': 'HASH'},
                    {'AttributeName': 'last_message_timestamp', 'KeyType': 'RANGE'}
                ],
                'Projection': {'ProjectionType': 'ALL'},
                'ProvisionedThroughput': {
                    'ReadCapacityUnits': 25,
                    'WriteCapacityUnits': 25
                }
                
            }
        ]
    )
    print(f"Table '{conversations_table_name}' created successfully.")
except ClientError as e:
    if e.response['Error']['Code'] == 'ResourceInUseException':
        print(f"Table '{conversations_table_name}' already exists.")
    else:
        raise
