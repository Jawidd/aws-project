#!/home/jawid/workspace/aws/aws-project/backend-flask/venv/bin/python

import os
import uuid
from datetime import datetime, timedelta, timezone
from dotenv import load_dotenv
from pathlib import Path
import boto3

# Load .env file
env_path = Path(__file__).resolve().parent.parent / ".env"
load_dotenv(dotenv_path=env_path)

# DynamoDB tables
messages_table_name = os.getenv("DYNAMODB_MESSAGES_TABLE", "messages")
conversations_table_name = os.getenv("DYNAMODB_CONVERSATIONS_TABLE", "conversations")
endpoint_url = os.getenv("DYNAMODB_LOCAL_URL")

ddb = boto3.resource('dynamodb', endpoint_url=endpoint_url)
messages_table = ddb.Table(messages_table_name)
conversations_table = ddb.Table(conversations_table_name)

# Users
users = {
    "jawid": {"uuid": "b1116ed1-cab0-4dcd-8e8a-817ef3ebbc6a", "handle": "jawid00786"},
    "alice": {"uuid": "a2227ff2-dde1-4abc-9f1e-1234567890ab", "handle": "alice123"},
    "bob": {"uuid": "d4449ff4-ffee-4def-8b2c-123456abcdef", "handle": "bob456"},
    "charlie": {"uuid": "e5551aa1-1234-4eab-9c7f-9876543210ff", "handle": "charlie_dev"}
}

# Conversations
conversations = [
    {
        "id": str(uuid.uuid4()),
        "participants": ["jawid", "alice"],
        "messages": [
            {"sender": "jawid", "text": "Hey Alice! How's it going?", "minutes_ago": 10},
            {"sender": "alice", "text": "Hi Jawid! All good, just working on the project.", "minutes_ago": 8},
            {"sender": "jawid", "text": "Great! Let's review it later.", "minutes_ago": 5}
        ]
    },
    {
        "id": str(uuid.uuid4()),
        "participants": ["alice", "bob"],
        "messages": [
            {"sender": "alice", "text": "Hey Bob, welcome to the team!", "minutes_ago": 7},
            {"sender": "bob", "text": "Thanks Alice! Excited to work with everyone.", "minutes_ago": 3}
        ]
    },
    {
        "id": str(uuid.uuid4()),
        "participants": ["jawid", "bob"],
        "messages": [
            {"sender": "jawid", "text": "Hey Bob, want to pair on the new feature?", "minutes_ago": 6},
            {"sender": "bob", "text": "Sure Jawid! Let's do it after lunch.", "minutes_ago": 4}
        ]
    },
    {
        "id": str(uuid.uuid4()),
        "participants": ["jawid", "charlie"],
        "messages": [
            {"sender": "charlie", "text": "Hey Jawid, are you available this week?", "minutes_ago": 60},
            {"sender": "jawid", "text": "Yes Charlie, I'm free tomorrow.", "minutes_ago": 120},
            {"sender": "charlie", "text": "Perfect, let's plan for the afternoon.", "minutes_ago": 240},
            {"sender": "jawid", "text": "Sounds good. I'll send you the agenda.", "minutes_ago": 1440}
        ]
    }
]

def seed():
    now = datetime.now(timezone.utc)

    for conv in conversations:
        conv_id = conv["id"]
        last_msg_text = ""
        last_msg_time = ""

        for msg in conv["messages"]:
            timestamp = (now - timedelta(minutes=msg["minutes_ago"])).isoformat()
            message_uuid = str(uuid.uuid4())
            sk = f"MSG#{timestamp}#{message_uuid}"
            pk = f"CONV#{conv_id}"
            sender_uuid = users[msg["sender"]]["uuid"]
            sender_handle = users[msg["sender"]]["handle"]

            messages_table.put_item(
                Item={
                    "pk": pk,
                    "sk": sk,
                    "message": msg["text"],
                    "sender_uuid": sender_uuid,
                    "sender_handle": sender_handle,
                    "recipient_uuids": [users[p]["uuid"] for p in conv["participants"] if p != msg["sender"]]
                }
            )

            last_msg_text = msg["text"]
            last_msg_time = timestamp

        for participant in conv["participants"]:
            participant_uuid = users[participant]["uuid"]
            other = [p for p in conv["participants"] if p != participant][0]
            other_uuid = users[other]["uuid"]
            other_handle = users[other]["handle"]

            conversations_table.put_item(
                Item={
                    "pk": f"USER#{participant_uuid}",
                    "sk": f"CONV#{conv_id}",
                    "last_message_text": last_msg_text,
                    "last_message_timestamp": last_msg_time,
                    "participants": [users[p]["uuid"] for p in conv["participants"]],
                    "other_handle": other_uuid,
                    "other_display_name": other_handle
                }
            )

    print("Seeding completed.")

if __name__ == "__main__":
    seed()
