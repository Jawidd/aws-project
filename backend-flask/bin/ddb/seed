#!/home/jawid/workspace/aws/aws-project/backend-flask/venv/bin/python

import os
import uuid
from datetime import datetime, timedelta, timezone
from dotenv import load_dotenv
from pathlib import Path
import boto3

# Load .env file
env_path = Path(__file__).resolve().parent.parent / ".env"
load_dotenv(dotenv_path=env_path)

# DynamoDB tables
messages_table_name = os.getenv("DYNAMODB_MESSAGES_TABLE", "messages")
conversations_table_name = os.getenv("DYNAMODB_CONVERSATIONS_TABLE", "conversations")

# Check environment and set endpoint
env_type = os.getenv("ENV_TYPE", "dev")
if env_type == "prod":
    endpoint_url = None  # Use AWS DynamoDB
    print("\033[1;35m == Seeding DynamoDB tables in AWS ==\033[0m")
else:
    endpoint_url = os.getenv("DYNAMODB_LOCAL_URL")
    print("\033[1;36m == Seeding DynamoDB tables locally ==\033[0m")

ddb = boto3.resource('dynamodb', endpoint_url=endpoint_url)
messages_table = ddb.Table(messages_table_name)
conversations_table = ddb.Table(conversations_table_name)

# Users with full_name added
users = {
    "jawid": {"uuid": "b1116ed1-cab0-4dcd-8e8a-817ef3ebbc6a", "handle": "jawid00786", "full_name": "Jawid Khan"},
    "alice": {"uuid": "a2227ff2-dde1-4abc-9f1e-1234567890ab", "handle": "alice123", "full_name": "Alice Wonderland"},
    "bob": {"uuid": "d4449ff4-ffee-4def-8b2c-123456abcdef", "handle": "bob456", "full_name": "Bob Builder"},
    "jack": {"uuid": "6f2328ea-7818-4373-93cd-cbf15e2dc6f9", "handle": "Jawid00776", "full_name": "Jack Company"}
}

# Conversations (added Jack's conversations)
conversations = [
    {
        "id": str(uuid.uuid4()),
        "participants": ["jack", "alice"],
        "messages": [
            {"sender": "jack", "text": "Hey Alice, nice to meet you!", "minutes_ago": 15},
            {"sender": "alice", "text": "Hi Jack! Welcome aboard.", "minutes_ago": 10}
        ]
    },
    {
        "id": str(uuid.uuid4()),
        "participants": ["jack", "bob"],
        "messages": [
            {"sender": "jack", "text": "Hey Bob, want to collaborate on a feature?", "minutes_ago": 20},
            {"sender": "bob", "text": "Sure Jack! Let's discuss after lunch.", "minutes_ago": 15}
        ]
    },
    {
        "id": str(uuid.uuid4()),
        "participants": ["jawid", "jack"],
        "messages": [
            {"sender": "jawid", "text": "Hey Jack, let's sync up this week.", "minutes_ago": 30},
            {"sender": "jack", "text": "Sounds good Jawid, when are you free?", "minutes_ago": 25}
        ]
    }
]

def seed():
    now = datetime.now(timezone.utc)

    for conv in conversations:
        conv_id = conv["id"]
        last_msg_text = ""
        last_msg_time = ""

        for msg in conv["messages"]:
            timestamp = (now - timedelta(minutes=msg["minutes_ago"])).isoformat()
            message_uuid = str(uuid.uuid4())
            sk = f"MSG#{timestamp}#{message_uuid}"
            pk = f"CONV#{conv_id}"
            sender_uuid = users[msg["sender"]]["uuid"]
            sender_handle = users[msg["sender"]]["handle"]
            sender_full_name = users[msg["sender"]]["full_name"]

            messages_table.put_item(
                Item={
                    "pk": pk,
                    "sk": sk,
                    "message": msg["text"],
                    "sender_uuid": sender_uuid,
                    "sender_handle": sender_handle,
                    "sender_full_name": sender_full_name,  # Added full_name
                    "recipient_uuids": [users[p]["uuid"] for p in conv["participants"] if p != msg["sender"]]
                }
            )

            last_msg_text = msg["text"]
            last_msg_time = timestamp

        for participant in conv["participants"]:
            participant_uuid = users[participant]["uuid"]
            other = [p for p in conv["participants"] if p != participant][0]
            other_uuid = users[other]["uuid"]
            other_handle = users[other]["handle"]
            other_full_name = users[other]["full_name"]

            conversations_table.put_item(
                Item={
                    "pk": f"USER#{participant_uuid}",
                    "sk": f"CONV#{conv_id}",
                    "last_message_text": last_msg_text,
                    "last_message_timestamp": last_msg_time,
                    "participants": [users[p]["uuid"] for p in conv["participants"]],
                    "other_handle": other_uuid,
                    "other_display_name": other_handle,
                    "other_full_name": other_full_name  # Added full_name
                }
            )

    print("Seeding completed.")

if __name__ == "__main__":
    seed()
