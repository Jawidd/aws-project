AWSTemplateFormatVersion: '2010-09-09'

# This template sets up a complete logging infrastructure for the Cruddur app
Description: This Template creates CloudWatch logs, CloudTrail for audit logging, and S3 storage.



# Input parameters that customize the deployment for different environments and projects
Parameters:
  environmentSelection:
    Description: "The environment for the resources"
    Type: String
    Default: test
    AllowedValues:
      - dev
      - test
      - prod
  projectPropmt:
    Description: "The project for the resources"
    Type: String
    Default: cruderapp
  trailNamePrompt:
    Description: "The name of the CloudTrail"
    Type: String
    Default: cruderapp-trail


Resources:
  # Main CloudWatch log group where all application and service logs will be stored
  # Keeps logs for 60 days to balance cost and compliance requirements
  accountLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: generic-log-group
      RetentionInDays: 60
      Tags: 
        - Key: "Project"
          Value: !Ref projectPropmt
        - Key: "Environment"
          Value: !Ref environmentSelection

  # Security policy that controls who can write to our log group
  # Currently allows any AWS resource in this account to send logs here
  # This is broad but safe since it's scoped to our own AWS account
  accountLogGroupPolicy:
    Type: AWS::Logs::ResourcePolicy
    Properties:
      PolicyName: "AllowAllResourcesOfThisAccountToWriteLogs"
      PolicyDocument: !Sub |
        {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "AllowAllResourcesOfThisAccountToWriteLogs",
              "Effect": "Allow",
              "Principal": { "AWS":"${AWS::AccountId}"},
              "Action": [
                "logs:CreateLogStream",
                "logs:PutLogEvents"
              ],
              "Resource": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:generic-log-group:*"
            }
          ]
        }


  # Special IAM role that gives CloudTrail permission to send audit logs to CloudWatch
  # CloudTrail needs this role to deliver API call logs to our log group
  cloudTrailRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${projectPropmt}-CloudTrailRole"
      AssumeRolePolicyDocument: |
        {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "cloudtrail.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        }
      Policies:
        - PolicyName: "CloudTrailToCloudWatchLogs"
          PolicyDocument: !Sub |
            {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Resource": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:generic-log-group:*"
                }
              ]
            }


  # S3 bucket that stores CloudTrail log files as backup and for long-term retention
  # Versioning is enabled to protect against accidental deletion or corruption
  cloudTrailS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${AWS::AccountId}-${projectPropmt}-cloudtrail-logs"
      VersioningConfiguration:
        Status: Enabled
      Tags: 
        - Key: "Project"
          Value: !Ref projectPropmt
        - Key: "Environment"
          Value: !Ref environmentSelection
          
  # Bucket policy that gives CloudTrail service permission to store log files in our S3 bucket
  # Includes security conditions to ensure proper file ownership and access control
  cloudTrailS3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref cloudTrailS3Bucket
      PolicyDocument: !Sub |
        {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "AWSCloudTrailAclCheck",
              "Effect": "Allow",
              "Principal": {
                "Service": "cloudtrail.amazonaws.com"
              },
              "Action": "s3:GetBucketAcl",
              "Resource": "arn:aws:s3:::${cloudTrailS3Bucket}"
            },
            {
              "Sid": "AWSCloudTrailWrite",
              "Effect": "Allow",
              "Principal": {
                "Service": "cloudtrail.amazonaws.com"
              },
              "Action": "s3:PutObject",
              "Resource": "arn:aws:s3:::${cloudTrailS3Bucket}/*",
              "Condition": {
                "StringEquals": {
                  "s3:x-amz-acl": "bucket-owner-full-control"
                }
              }
            }
          ]
        }






  # The main CloudTrail that captures all API calls and management events in our AWS account
  # Currently disabled (IsLogging: false) - enable this when ready to start audit logging
  # Sends logs to both S3 (for storage) and CloudWatch (for real-time monitoring)
  cloudTrail:
    Type: AWS::CloudTrail::Trail
    DependsOn: cloudTrailS3BucketPolicy
    Properties:
      TrailName: !Sub "${projectPropmt}-Trail"
      IsLogging: false  # Set to true when ready to start logging (will incur costs)
      S3BucketName: !Ref cloudTrailS3Bucket
      S3KeyPrefix: "cloudtrail-logs/"  # Organizes log files in a dedicated folder
      CloudWatchLogsLogGroupArn: !GetAtt accountLogGroup.Arn
      CloudWatchLogsRoleArn: !GetAtt cloudTrailRole.Arn
      EnableLogFileValidation: true  # Ensures log files haven't been tampered with
      IncludeGlobalServiceEvents: true  # Captures IAM, CloudFront, and other global service events
      Tags: 
        - Key: "Project"
          Value: !Ref projectPropmt
        - Key: "Environment"
          Value: !Ref environmentSelection

# These outputs provide important resource identifiers that other stacks or applications might need
Outputs:
  LogGroupName:
    Description: "The name of the CloudWatch log group"
    Value: !Ref accountLogGroup
  PolicyName:
    Description: "The name of the CloudWatch log group policy"
    Value: !Ref accountLogGroupPolicy
  CloudTrailRoleArn:
    Description: "The ARN of the CloudTrail IAM Role"
    Value: !GetAtt cloudTrailRole.Arn
  CloudTrailName:
    Description: "The name of the CloudTrail"
    Value: !Ref cloudTrail
