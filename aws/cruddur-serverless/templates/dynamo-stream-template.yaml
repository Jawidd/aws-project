AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: DynamoDB tables and message stream Lambda for Cruddur

Resources:
  # Messages Table
  MessagesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: cruddur-messages
      AttributeDefinitions:
        - AttributeName: pk
          AttributeType: S
        - AttributeName: sk
          AttributeType: S
      KeySchema:
        - AttributeName: pk
          KeyType: HASH
        - AttributeName: sk
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      SSESpecification:
        SSEEnabled: true

  # Conversations Table
  ConversationsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: cruddur-conversations
      AttributeDefinitions:
        - AttributeName: pk
          AttributeType: S
        - AttributeName: sk
          AttributeType: S
        - AttributeName: last_message_timestamp
          AttributeType: S
      KeySchema:
        - AttributeName: pk
          KeyType: HASH
        - AttributeName: sk
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST
      GlobalSecondaryIndexes:
        - IndexName: LastMessageIndex
          KeySchema:
            - AttributeName: pk
              KeyType: HASH
            - AttributeName: last_message_timestamp
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      SSESpecification:
        SSEEnabled: true

  # WebSocket API Gateway
  WebSocketApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: cruddur-websocket
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: "$request.body.action"

  # WebSocket Connection Table
  ConnectionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: cruddur-websocket-connections
      AttributeDefinitions:
        - AttributeName: connectionId
          AttributeType: S
      KeySchema:
        - AttributeName: connectionId
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true

  # Message Stream Lambda
  MessageStreamFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: message-stream
      CodeUri: ../functions/message-stream/ 
      Handler: app.lambda_handler
      Runtime: python3.13
      Timeout: 30
      Environment:
        Variables:
          DYNAMODB_MESSAGES_TABLE: !Ref MessagesTable
          DYNAMODB_CONVERSATIONS_TABLE: !Ref ConversationsTable
          CONNECTIONS_TABLE: !Ref ConnectionsTable
          WEBSOCKET_API_ENDPOINT: !Sub "https://${WebSocketApi}.execute-api.${AWS::Region}.amazonaws.com/prod"
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref MessagesTable
        - DynamoDBCrudPolicy:
            TableName: !Ref ConversationsTable
        - DynamoDBCrudPolicy:
            TableName: !Ref ConnectionsTable
        - Statement:
            - Effect: Allow
              Action:
                - execute-api:ManageConnections
              Resource: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/prod/POST/@connections/*"
      Events:
        MessagesStreamEvent:
          Type: DynamoDB
          Properties:
            Stream: !GetAtt MessagesTable.StreamArn
            StartingPosition: LATEST
            BatchSize: 10

  # WebSocket Connect/Disconnect Functions
  WebSocketConnectFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: websocket-connect
      CodeUri: ../functions/websocket-connect/
      Handler: app.lambda_handler
      Runtime: python3.13
      Environment:
        Variables:
          CONNECTIONS_TABLE: !Ref ConnectionsTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ConnectionsTable

  WebSocketDisconnectFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: websocket-disconnect
      CodeUri: ../functions/websocket-disconnect/
      Handler: app.lambda_handler
      Runtime: python3.13
      Environment:
        Variables:
          CONNECTIONS_TABLE: !Ref ConnectionsTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ConnectionsTable

  # WebSocket Routes
  ConnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: $connect
      AuthorizationType: NONE
      Target: !Sub "integrations/${ConnectIntegration}"

  DisconnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: $disconnect
      AuthorizationType: NONE
      Target: !Sub "integrations/${DisconnectIntegration}"

  # WebSocket Integrations
  ConnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WebSocketConnectFunction.Arn}/invocations"

  DisconnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WebSocketDisconnectFunction.Arn}/invocations"

  # Lambda Permissions
  ConnectPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref WebSocketConnectFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/*"

  DisconnectPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref WebSocketDisconnectFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/*"

  # WebSocket Deployment
  WebSocketDeployment:
    Type: AWS::ApiGatewayV2::Deployment
    DependsOn:
      - ConnectRoute
      - DisconnectRoute
    Properties:
      ApiId: !Ref WebSocketApi

  WebSocketStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref WebSocketApi
      DeploymentId: !Ref WebSocketDeployment
      StageName: prod

Outputs:
  MessagesTableName:
    Value: !Ref MessagesTable

  ConversationsTableName:
    Value: !Ref ConversationsTable

  MessageStreamFunctionArn:
    Value: !GetAtt MessageStreamFunction.Arn

  WebSocketApiEndpoint:
    Value: !Sub "wss://${WebSocketApi}.execute-api.${AWS::Region}.amazonaws.com/prod"
    Export:
      Name: CruddurWebSocketEndpoint
